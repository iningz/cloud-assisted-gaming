// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: openSession/openSession.proto

package openSession

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenSessionClient is the client API for OpenSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenSessionClient interface {
	Request(ctx context.Context, in *SchedulerRequest, opts ...grpc.CallOption) (*SessionInfo, error)
}

type openSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenSessionClient(cc grpc.ClientConnInterface) OpenSessionClient {
	return &openSessionClient{cc}
}

func (c *openSessionClient) Request(ctx context.Context, in *SchedulerRequest, opts ...grpc.CallOption) (*SessionInfo, error) {
	out := new(SessionInfo)
	err := c.cc.Invoke(ctx, "/openSession.OpenSession/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenSessionServer is the server API for OpenSession service.
// All implementations must embed UnimplementedOpenSessionServer
// for forward compatibility
type OpenSessionServer interface {
	Request(context.Context, *SchedulerRequest) (*SessionInfo, error)
	mustEmbedUnimplementedOpenSessionServer()
}

// UnimplementedOpenSessionServer must be embedded to have forward compatible implementations.
type UnimplementedOpenSessionServer struct {
}

func (UnimplementedOpenSessionServer) Request(context.Context, *SchedulerRequest) (*SessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedOpenSessionServer) mustEmbedUnimplementedOpenSessionServer() {}

// UnsafeOpenSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenSessionServer will
// result in compilation errors.
type UnsafeOpenSessionServer interface {
	mustEmbedUnimplementedOpenSessionServer()
}

func RegisterOpenSessionServer(s grpc.ServiceRegistrar, srv OpenSessionServer) {
	s.RegisterService(&OpenSession_ServiceDesc, srv)
}

func _OpenSession_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSessionServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openSession.OpenSession/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSessionServer).Request(ctx, req.(*SchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenSession_ServiceDesc is the grpc.ServiceDesc for OpenSession service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenSession_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openSession.OpenSession",
	HandlerType: (*OpenSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _OpenSession_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openSession/openSession.proto",
}
